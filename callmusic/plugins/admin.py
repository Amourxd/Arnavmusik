from pyrogram import filters
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from helper.decorators import authorized_users_only
from helper.admins import *
from helper.filters import command, other_filters
from helper.queues import QUEUE, clear_queue
from helper.downloader import skip_current_song, skip_item
from callmusic import BOT_USERNAME
from callmusic import bot as kanna
from callmusic import call_py

@kanna.on_message(command(["reload", f"reload@{BOT_USERNAME}"]) & other_filters)
@authorized_users_only
async def update_admin(client, message):
    global admins
    new_admins = []
    new_ads = await client.get_chat_members(message.chat.id, filter="administrators")
    for u in new_ads:
        new_admins.append(u.user.id)
    admins[message.chat.id] = new_admins
    await message.reply_text(
        f"**·¥Ä·¥Ö·¥ç…™…¥ ·¥Ñ·¥Ä·¥Ñ ú·¥á  Ä·¥á ü·¥è·¥Ä·¥Ö·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥ássÍú∞·¥ú ü ü è  ô·¥Ä ô è‚Äã {m.from_user.mention()}.**"
    )


@kanna.on_message(command(["skip", f"skip@{BOT_USERNAME}", "vskip"]) & other_filters)
@authorized_users_only
async def skip(client, m: Message):
    chat_id = m.chat.id
    if len(m.command) < 2:
        op = await skip_current_song(chat_id)
        if op == 0:
            await m.reply("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥ò ü·¥Ä è…™…¥…¢")
        elif op == 1:
            await m.reply(f"**…¥·¥è ·¥ç·¥è Ä·¥á «´·¥ú·¥á·¥ú·¥á …™·¥Ä·¥ç  ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†·¥Ñ  ô è·¥á “ì Ä…¥·¥Ös.**")
        elif op == 2:
            await m.reply("** ô è·¥á  ô Ä·¥è «´·¥ú·¥á·¥ú·¥á …™s ·¥á·¥ç·¥ò·¥õ è üòêü•Äü•∫.**")
        else:
            await m.reply(f"**‚úØ ùñ≤·¥õ Ä·¥á·¥Ä·¥ç s·¥ã…™·¥©·¥©·¥á·¥Ö ‚úØ\n‚îÇ \n‚îî ô è : {m.from_user.mention()}‚õÑ**")
    else:
        skip = m.text.split(None, 1)[1]
        OP = "üóë ** Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö s·¥è…¥…¢ “ì Ä·¥è·¥ç «´·¥ú·¥á·¥ú·¥á:**"
        if chat_id in QUEUE:
            items = [int(x) for x in skip.split(" ") if x.isdigit()]
            items.sort(reverse=True)
            for x in items:
                if x == 0:
                    pass
                else:
                    hm = await skip_item(chat_id, x)
                    if hm == 0:
                        pass
                    else:
                        OP = OP + "\n" + f"**#{x}** - {hm}"
            await m.reply(OP)


@kanna.on_message(
    command(["stop", f"stop@{BOT_USERNAME}", "end", f"end@{BOT_USERNAME}", "vstop"])
    & other_filters
)
@authorized_users_only
async def stop(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.leave_group_call(chat_id)
            clear_queue(chat_id)
            await m.reply(f"‚ûª **s·¥õ Ä·¥á·¥Ä·¥ç ·¥á…¥·¥Ö·¥á·¥Ö/s·¥õ·¥è·¥©·¥©·¥á·¥Ö** ‚ùÑ\n‚îÇ \n‚îî ô è : {m.from_user.mention()}ü•Ä")
        except Exception as e:
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™s s·¥õ…™s Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@kanna.on_message(
    command(["pause", f"pause@{BOT_USERNAME}", "vpause"]) & other_filters
)
@authorized_users_only
async def pause(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.pause_stream(chat_id)
            await m.reply(
                f"‚ûª **s·¥õ Ä·¥á·¥Ä·¥ç ·¥©·¥Ä·¥ús·¥á·¥Ö** ü•∫\n‚îÇ \n‚îî ô è : {m.from_user.mention()}ü•Ä."
            )
        except Exception as e:
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™…¥ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@kanna.on_message(
    command(["resume", f"resume@{BOT_USERNAME}", "vresume"]) & other_filters
)
@authorized_users_only
async def resume(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.resume_stream(chat_id)
            await m.reply(
                f"‚ûª **s·¥õ Ä·¥á·¥Ä·¥ç  Ä·¥ás·¥ú·¥ç·¥á·¥Ö** üí´\n‚îÇ \n‚îî ô è : {m.from_user.mention()} ü•Ä"
            )
        except Exception as e:
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™…¥ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@kanna.on_message(command(["mute", f"mute@{BOT_USERNAME}", "vmute"]) & other_filters)
@authorized_users_only
async def mute(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.mute_stream(chat_id)
            await m.reply(
                f"üéß ·¥†·¥è…™·¥Ñ·¥á·¥Ñ ú·¥Ä·¥õ ·¥ç·¥ú·¥õ·¥á·¥Ö  ô è : {m.from_user.mention()}‚Äã!"
            )
        except Exception as e:
            await m.reply(f"üö´ **error:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™…¥ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@kanna.on_message(
    command(["unmute", f"unmute@{BOT_USERNAME}", "vunmute"]) & other_filters
)
@authorized_users_only
async def unmute(client, m: Message):
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.unmute_stream(chat_id)
            await m.reply(
                f"üéß ·¥†·¥è…™·¥Ñ·¥á·¥Ñ ú·¥Ä·¥õ ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö  ô è : {m.from_user.mention()} ‚Äã!."
            )
        except Exception as e:
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™…¥ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@kanna.on_callback_query(filters.regex("cbpause"))
async def cbpause(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer(
            " è·¥è·¥ú' Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥ !\n\n¬ª  Ä·¥á·¥†·¥á Ä·¥õ  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ús·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ “ì Ä·¥è·¥ç ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs."
        )
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer(
            "üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õs ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s button !",
            show_alert=True,
        )
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.pause_stream(chat_id)
            await query.edit_message_text(
                "‚è∏ ·¥õ ú·¥á s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ú·¥Äs ·¥ò·¥Ä·¥ús·¥á·¥Ö"
                )
        except Exception as e:
            await query.edit_message_text(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`", )
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@kanna.on_callback_query(filters.regex("cbresume"))
async def cbresume(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer(
            " è·¥è·¥ú' Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥ !\n\n¬ª  Ä·¥á·¥†·¥á Ä·¥õ  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ús·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ “ì Ä·¥è·¥ç ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs."
        )
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer(
            "üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õs ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !",
            show_alert=True,
        )
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.resume_stream(chat_id)
            await query.edit_message_text(
                "‚ñ∂Ô∏è The Streaming has Resumed")
        except Exception as e:
            await query.edit_message_text(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@kanna.on_callback_query(filters.regex("cbstop"))
async def cbstop(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer(
            " è·¥è·¥ú' Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥ !\n\n¬ª  Ä·¥á·¥†·¥á Ä·¥õ  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ús·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ “ì Ä·¥è·¥ç ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs."
        )
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer(
            "üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õs ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !",
            show_alert=True,
        )
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.leave_group_call(chat_id)
            clear_queue(chat_id)
            await query.edit_message_text(
                "‚úÖ **·¥õ ú…™s s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢  ú·¥Äs ·¥á…¥·¥Ö·¥á·¥Ö**")
        except Exception as e:
            await query.edit_message_text(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@kanna.on_callback_query(filters.regex("cbmute"))
async def cbmute(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer(
            " è·¥è·¥ú' Ä·¥á ·¥Ä…¥ ·¥Ä…¥·¥è…¥ è·¥ç·¥è·¥ús ·¥Ä·¥Ö·¥ç…™…¥ !\n\n¬ª  Ä·¥á·¥†·¥á Ä·¥õ  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ús·¥á Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ “ì Ä·¥è·¥ç ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs."
        )
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer(
            "üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !",
            show_alert=True,
        )
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.mute_stream(chat_id)
            await query.edit_message_text(
                "üîá ·¥ús·¥á Ä ô·¥è·¥õ s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è ·¥ç·¥ú·¥õ·¥á·¥Ö")
        except Exception as e:
            await query.edit_message_text(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢", show_alert=True)


@kanna.on_callback_query(filters.regex("cbunmute"))
async def cbunmute(_, query: CallbackQuery):
    if query.message.sender_chat:
        return await query.answer(
            "you're an Anonymous Admin !\n\n¬ª revert back to user account from admin rights."
        )
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer(
            "üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õs ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !",
            show_alert=True,
        )
    chat_id = query.message.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.unmute_stream(chat_id)
            await query.edit_message_text(
                "üîä ·¥ús·¥á Ä ô·¥è·¥õ s·¥ú·¥Ñ·¥Ñ·¥ás“ì·¥ú ü ü è ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö")
        except Exception as e:
            await query.edit_message_text(f"üö´ **error:**\n\n`{e}`")
    else:
        await query.answer("‚ùå nothing is currently streaming", show_alert=True)


@kanna.on_message(
    command(["volume", f"volume@{BOT_USERNAME}", "vol"]) & other_filters
)
@authorized_users_only
async def change_volume(client, m: Message):
    range = m.command[1]
    chat_id = m.chat.id
    if chat_id in QUEUE:
        try:
            await call_py.change_volume_call(chat_id, volume=int(range))
            await m.reply(f"‚úÖ **·¥†·¥è ü·¥ú·¥ç·¥á s·¥á·¥õ ·¥õ·¥è** `{range}`%")
        except Exception as e:
            await m.reply(f"üö´ **·¥á Ä Ä·¥è Ä:**\n\n`{e}`")
    else:
        await m.reply("‚ùå **…¥·¥è·¥õ ú…™…¥…¢ …™…¥ s·¥õ Ä·¥á·¥Ä·¥ç…™…¥…¢**")


@kanna.on_callback_query(filters.regex("cbskip"))
async def cbskip(_, query: CallbackQuery):
    a = await _.get_chat_member(query.message.chat.id, query.from_user.id)
    if not a.can_manage_voice_chats:
        return await query.answer(
            "üí° ·¥è…¥ ü è ·¥Ä·¥Ö·¥ç…™…¥ ·¥°…™·¥õ ú ·¥ç·¥Ä…¥·¥Ä…¢·¥á ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ·¥Ä…¥ ·¥õ·¥Ä·¥ò ·¥õ ú…™s  ô·¥ú·¥õ·¥õ·¥è…¥ !",
            show_alert=True,
        )
    chat_id = query.message.chat.id
    user_id = query.from_user.id
    queue = await skip_current_song(chat_id)
    if queue == 0:
        await query.answer("‚ùå …¥·¥è·¥õ ú…™…¥…¢ …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥ò ü·¥Ä è…™…¥…¢", show_alert=True)
    elif queue == 1:
        await query.answer(
            "¬ª ·¥õ ú·¥á Ä·¥á's …¥·¥è ·¥ç·¥è Ä·¥á ·¥ç·¥ús…™·¥Ñ …™…¥ «´·¥ú·¥á·¥ú·¥á ·¥õ·¥è s·¥ã…™·¥ò, ·¥ús·¥á Ä ô·¥è·¥õ  ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ.",
            show_alert=True,
        )
    elif queue == 2:
        await query.answer(
            "üóëÔ∏è ·¥Ñ ü·¥á·¥Ä Ä…™…¥…¢ ·¥õ ú·¥á **«´·¥ú·¥á·¥ú·¥ás**\n\n¬ª **·¥ús·¥á Ä ô·¥è·¥õ**  ü·¥á·¥Ä·¥†…™…¥…¢ ·¥†…™·¥Ö·¥á·¥è ·¥Ñ ú·¥Ä·¥õ.",
            show_alert=True,
        )
    else:
        await query.answer("…¢·¥è·¥ás ·¥õ·¥è ·¥õ ú·¥á …¥·¥áx·¥õ ·¥õ Ä·¥Ä·¥Ñ·¥ã, ·¥ò Ä·¥è·¥Ñ·¥Ñ·¥áss…™…¥…¢...")
        await query.message.delete()
        await _.send_message(
            chat_id,
            text=f"‚úÖ ùêÉùê®ùê∞ùêßùê•ùê®ùêöùêùùê¢ùêßùê† ùêçùêûùê±ùê≠ ùêíùê®ùêßùê†\nùêÖùê´ùê®ùê¶ ùêèùê•ùêöùê≤ùê•ùê¢ùê¨ùê≠ üíû ..",
        )
        remove_if_exists(message)
